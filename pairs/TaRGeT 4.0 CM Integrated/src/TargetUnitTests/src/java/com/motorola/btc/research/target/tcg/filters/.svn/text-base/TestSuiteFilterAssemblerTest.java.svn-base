/*
 * @(#)TestSuiteFilterAssemblerTest.java
 *
 * (c) COPYRIGHT 2005 MOTOROLA INC.
 * MOTOROLA CONFIDENTIAL PROPIETARY
 * Template ID and version: IL93-TMP-01-0112  Version 1.10
 *
 * REVISION HISTORY:
 * Author    Date           CR Number    Brief Description
 * -------   ------------   ----------   ----------------------------
 * dhq348    Aug 9,  2007   LIBmm42774   Initial creation.
 * dhq348    Aug 16, 2007   LIBmm42774   Rework after inspection LX199806.
 */
package com.motorola.btc.research.target.tcg.filters;

import java.util.ArrayList;
import java.util.Collection;

import junit.framework.Assert;

import org.junit.BeforeClass;
import org.junit.Test;

import com.motorola.btc.research.target.common.exceptions.UseCaseDocumentXMLException;
import com.motorola.btc.research.target.common.ucdoc.FlowStep;
import com.motorola.btc.research.target.tcg.TestCaseGenerationTests;
import com.motorola.btc.research.target.tcg.exceptions.InvalidSimilarityException;
import com.motorola.btc.research.target.tcg.exceptions.TestGenerationException;
import com.motorola.btc.research.target.tcg.extractor.TestCase;
import com.motorola.btc.research.target.tcg.extractor.TestSuite;

/**
 * Tests <code>TestSuiteFilterAssembler</code> class. It tests some arrangements of requirements
 * and then checks the amount of test cases generated by the filter produced by method
 * TestSuiteFilterAssembler.assemblyFilter()
 */
public class TestSuiteFilterAssemblerTest
{

    /** A simple raw test suite */
    private static TestSuite<TestCase<FlowStep>> rawTestSuite;

    /**
     * Creates a simple raw test suite from HUGE_USE_CASE_DOCUMENT.
     * 
     * @throws TestGenerationException Thrown in case of any error during the test generation.
     * @throws UseCaseDocumentXMLException Thrown in case of any error during the XML extraction or
     * during the XML parsing.
     */
    @BeforeClass
    public static void setUpBeforeClass() throws TestGenerationException,
            UseCaseDocumentXMLException
    {
        rawTestSuite = TestFiltersUtil
                .generateTestSuite(TestCaseGenerationTests.HUGE_USE_CASE_DOCUMENT);
    }

    /**
     * Tests some arrangements of requirements and sets different set of requirements to
     * TestSuiteFilterAssembler. It checks the amount of test cases in each generated test suite.
     * 
     * <pre>
     * <ol>
     * <li>Checks that filtering by requirement FR_TARGET_0025 produces 9 test cases.
     * <li>Checks that filtering by requirements FR_TARGET_0025 or FR_TARGET_0040 produces 15 test cases.
     * <li>Checks that filtering by requirement FR_TARGET_0040 produces 6 test cases.
     * </ol>
     * </pre>
     */
    @Test
    public void testAssemblyFilter()
    {
        TestSuiteFilterAssembler assembler = new TestSuiteFilterAssembler();
        Collection<String> requirements = new ArrayList<String>();
        requirements.add("FR_TARGET_0025");
        assembler.setRequirementsFilter(requirements);

        TestSuiteFilter<FlowStep> filter = assembler.assemblyFilter();
        TestSuite<TestCase<FlowStep>> newSuite = filter.filter(rawTestSuite);
        Assert.assertNotNull("The filtered test suite is null.", newSuite);
        Assert.assertEquals("Wrong number of test cases.", 9, newSuite.getTestCases().size());

        requirements.add("FR_TARGET_0040");
        assembler.setRequirementsFilter(requirements);
        filter = assembler.assemblyFilter();
        newSuite = filter.filter(rawTestSuite);
        Assert.assertNotNull("The filtered test suite is null.", newSuite);
        Assert.assertEquals("Wrong number of test cases.", 15, newSuite.getTestCases().size());

        requirements = new ArrayList<String>();
        requirements.add("FR_TARGET_0040");
        assembler.setRequirementsFilter(requirements);
        filter = assembler.assemblyFilter();
        newSuite = filter.filter(newSuite);
        Assert.assertNotNull("The filtered test suite is null.", newSuite);
        Assert.assertEquals("Wrong number of test cases.", 6, newSuite.getTestCases().size());
    }

    /**
     * Test the behavior of <code>TestSuiteFilterAssembler</code> with the inclusion of a
     * similarity filter. Tests the number of test cases with a percentage from 0 to 100 of
     * similarity.
     */
    @Test
    public void testAssemblyFilterWithSimilarityFilter()
    {
        TestSuiteFilterAssembler assembler = new TestSuiteFilterAssembler();
        Collection<String> requirements = new ArrayList<String>();
        requirements.add("FR_TARGET_0025");
        requirements.add("FR_TARGET_0040");
        assembler.setRequirementsFilter(requirements);

        TestSuiteFilter<FlowStep> filter = null;
        TestSuite<TestCase<FlowStep>> newSuite = null;

        try
        {
            for (int i = 0; i <= 100; i++)
            {
                assembler.setSimilarityFilter((double) i);
                filter = assembler.assemblyFilter();
                newSuite = filter.filter(rawTestSuite);
                Assert.assertNotNull("The filtered test suite is null.", newSuite);
                double expected = Math.round(0.15 * i);
                Assert.assertEquals("Wrong number of test cases.", expected, (double) newSuite
                        .getTestCases().size());
            }
        }
        catch (InvalidSimilarityException e)
        {
            e.printStackTrace();
            Assert.fail("An invalid similarity was set.");
        }

        try
        {
            assembler.setSimilarityFilter(-35.00);
            Assert.fail("The assembler has accepted an invalid similarity.");
        }
        catch (InvalidSimilarityException e)
        {
            Assert.assertTrue("The similarity set was successfully rejected.", true);
        }
    }
}
